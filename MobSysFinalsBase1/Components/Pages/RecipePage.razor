@page "/recipes"
@using MobSysFinalsBase1.Models
@using MobSysFinalsBase1.Services
@inject RecipeDbService RecipeDbService

<h3>📚 Recipes</h3>

<input type="text" @bind="searchTerm" placeholder="Search by title..." class="search-box" />

<div>
    <button @onclick="NewRecipe">➕ Add New Recipe</button>
</div>

@if (SelectedRecipe != null)
{
    <EditForm Model="SelectedRecipe" OnValidSubmit="SaveRecipe">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <fieldset class="hasText">
            <legend>Title:</legend>
            <div class="form-group">
                <InputText @bind-Value="SelectedRecipe.Title" placeholder="" class="form-control" />
            </div>
        </fieldset>

        <fieldset class="hasText">
            <legend>Prep Time (min):</legend>
            <div class="form-group">
                <InputNumber @bind-Value="SelectedRecipe.PrepTimeMinutes" placeholder="Prep Time (min)" class="form-control" />
            </div>
        </fieldset>

        <fieldset class="hasText">
            <legend>Ingredients:</legend>
            <div class="editable-list">
                <ul>
                    @foreach (var ingredient in Ingredients)
                    {
                        <li>
                            @ingredient.Amount @ingredient.Unit - @ingredient.Name
                            <button @onclick="@(() => RemoveIngredient(ingredient))">❌ Remove</button>
                        </li>
                    }
                </ul>

                <hr />
                <table style="width: 100%;">
                    <tr>
                        <td style="width: 70px;"><input type="number" step="0.1" class="" /></td>
                        <td>
                            <select>
                                <option></option>
                                <option>lb</option>
                                <option>ounces</option>
                                <option>g</option>
                                <option>kg</option>
                                <option>cup</option>
                                <option>liter</option>
                                <option>tablespoon</option>
                                <option>teaspoon</option>
                                <option>piece(s)</option>
                            </select>
                        </td>
                        <td colspan="1" rowspan="2">
                            <button class="btn btn-success" @bind="SaveIngredient" style=" height: 100%; width: 50px; margin: 5px; padding: 25px 6px; font-size: 30px; ">Add</button>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <input type="text" placeholder="Add Ingredient here" class="" />
                        </td>
                    </tr>
                </table>

            </div>
        </fieldset>

        <fieldset class="hasText">
            <legend>Instructions:</legend>
            <div class="form-group">
                <InputTextArea @bind-Value="instructionsText" class="form-control" />
            </div>
        </fieldset>

        <div class="form-group">
            <button type="submit" class="btn btn-primary">💾 Save</button>
            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">❌ Cancel</button>
        </div>
    </EditForm>
}

<table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Prep Time</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var recipe in FilteredRecipes)
        {
            <tr>
                <td ondblclick="@(() => ToggleViewDetails(recipe.Id))" style="cursor: pointer;">
                    @recipe.Title
                </td>
                <td>@recipe.PrepTimeMinutes min</td>
                <td>
                    <button class="btn btn-sm btn-warning" @onclick="() => EditRecipe(recipe)">✏️ Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteRecipe(recipe.Id)">🗑️ Delete</button>
                </td>
            </tr>

            @if (ViewingRecipeId == recipe.Id)
            {
                <tr>
                    <td colspan="3">
                        <strong>Ingredients:</strong>
                        <div class="mb-2">
                            <button class="btn btn-sm btn-outline-info" @onclick="ToggleIngredientView">
                                @(showIngredientsGrid ? "📋 Show as List" : "🔲 Show as Grid")
                            </button>
                            <button class="btn btn-sm btn-outline-success ms-2" @onclick="ToggleUnitDisplay">
                                @(showMetricUnits ? "🇺🇸 Show US Units" : "🌍 Show Metric")
                            </button>
                        </div>

                        @if (showIngredientsGrid)
                        {
                            <div class="ingredient-grid">
                                @foreach (var item in recipe.Ingredients)
                                {
                                    <div class="ingredient-item">
                                        @(showMetricUnits ? ConvertIngredientToMetric(item) : item)
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <ul>
                                @foreach (var item in recipe.Ingredients)
                                {
                                    <li>@(showMetricUnits ? ConvertIngredientToMetric(item) : item)</li>
                                }
                            </ul>
                        }

                        <strong>Instructions:</strong>
                        <div class="instruction-steps">
                            @foreach (var step in recipe.Instructions.Select((text, index) => new { text, index }))
                            {
                                <div class="step-item">
                                    <strong>Step @(step.index + 1):</strong> @step.text
                                </div>
                            }
                        </div>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<style>
    .ingredient-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
        gap: 10px;
        margin-top: 10px;
    }

    .ingredient-item {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        padding: 8px;
        border-radius: 4px;
        text-align: center;
    }

    .instruction-steps {
        margin-top: 10px;
    }

    .step-item {
        background-color: #f9f9f9;
        border-left: 4px solid #007bff;
        padding: 10px;
        margin-bottom: 8px;
        border-radius: 4px;
    }
</style>

@code {
    private Guid? ViewingRecipeId = null;

    private Recipe? SelectedRecipe;
    private List<Recipe> AllRecipes = new();
    private string searchTerm = "";

    private List<Ingredient> Ingredients = new();
    private Ingredient NewIngredient = new();

    private string instructionsText = "";

    private bool showIngredientsGrid = false;
    private bool showMetricUnits = false;

    private Dictionary<string, (string metricUnit, double factor)> unitConversions = new()
    {
        { "teaspoon", ("ml", 4.929) },
        { "tablespoon", ("ml", 14.787) },
        { "cup", ("ml", 236.588) },
        { "pint", ("ml", 473.176) },
        { "quart", ("ml", 946.353) },
        { "gallon", ("liters", 3.78541) },
        { "ounce", ("grams", 28.3495) },
        { "pound", ("kg", 0.453592) }
    };

    string ConvertIngredientToMetric(string ingredientLine)
    {
        foreach (var unit in unitConversions.Keys.OrderByDescending(u => u.Length))
        {
            var parts = ingredientLine.ToLower().Split(' ');
            if (parts.Length >= 2 && double.TryParse(parts[0], out double qty))
            {
                if (parts[1].StartsWith(unit))
                {
                    var conversion = unitConversions[unit];
                    double converted = qty * conversion.factor;
                    return $"{converted:F1} {conversion.metricUnit} {string.Join(' ', parts.Skip(2))}";
                }
            }
        }

        return ingredientLine; // Return as-is if not convertible
    }

    void SaveIngredient()
    {
        if (!string.IsNullOrWhiteSpace(NewIngredient.Name) && NewIngredient.Amount > 0)
        {
            Ingredients.Add(new Ingredient
                {
                    Name = NewIngredient.Name,
                    Amount = NewIngredient.Amount,
                    Unit = NewIngredient.Unit
                });

            // Clear input fields
            NewIngredient = new Ingredient();
            StateHasChanged(); // Refresh UI
        }
    }




    void ToggleViewDetails(Guid id)
    {
        ViewingRecipeId = ViewingRecipeId == id ? null : id;
    }

    void ToggleIngredientView()
    {
        showIngredientsGrid = !showIngredientsGrid;
    }

    void ToggleUnitDisplay()
    {
        showMetricUnits = !showMetricUnits;
    }

    protected override void OnInitialized()
    {
        LoadRecipes();
    }

    void LoadRecipes()
    {
        AllRecipes = RecipeDbService.GetAll();
    }

    void NewRecipe()
    {
        SelectedRecipe = new Recipe();
        
        instructionsText = "";
    }

    void EditRecipe(Recipe recipe)
    {
        SelectedRecipe = new Recipe
            {
                Id = recipe.Id,
                Title = recipe.Title,
                PrepTimeMinutes = recipe.PrepTimeMinutes,
                Ingredients = new List<string>(recipe.Ingredients),
                Instructions = new List<string>(recipe.Instructions)
            };

        // ingredientsText = string.Join("\n", recipe.Ingredients);
        instructionsText = string.Join("\n", recipe.Instructions);
    }

    void SaveRecipe()
    {
        if (SelectedRecipe == null) return;

        // Convert text inputs into list format
        // SelectedRecipe.Ingredients = ingredientsText
        //     .Split('\n', StringSplitOptions.RemoveEmptyEntries)
        //     .Select(i => i.Trim())
        //     .ToList();

        SelectedRecipe.Instructions = instructionsText
            .Split('\n', StringSplitOptions.RemoveEmptyEntries)
            .Select(i => i.Trim())
            .ToList();

        // Update the database
        RecipeDbService.AddOrUpdate(SelectedRecipe);

        // Clear selection & reload data
        SelectedRecipe = null;
        LoadRecipes();

        // Force UI refresh
        StateHasChanged();
    }

    void RemoveIngredient(Ingredient ingredient)
    {
        Ingredients.Remove(ingredient);
        StateHasChanged(); // Refresh UI after removal
    }



    void CancelEdit()
    {
        SelectedRecipe = null;
        // ingredientsText = "";
        instructionsText = "";
    }

    void DeleteRecipe(Guid id)
    {
        RecipeDbService.Delete(id);
        if (SelectedRecipe?.Id == id)
            SelectedRecipe = null;

        LoadRecipes();
    }

    private IEnumerable<Recipe> FilteredRecipes => AllRecipes
    .Where(r => string.IsNullOrWhiteSpace(searchTerm) || r.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
    .ToList();

}
